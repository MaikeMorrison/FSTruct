c("1", "1", "(x)", "1", ":", "1", "0", "0",
"2", "2", "(x)", "1", ":", "1",  "0", "0",
"3", "3", "(x)", "2", ":", "0.0137", "0.7567", "0.2296",
"4", "4", "(x)", "2", ":", "0", "0.7325", "0.2674",
"5", "5", "(x)", "2", ":", "0.0224", "0.7279", "0.2496",
"6", "6", "(x)", "3", ":", "0.0222", "0.7372", "0.2406",
"7", "7", "(x)", "3", ":", "0", "0.7396", "0.2603",
"8", "8", "(x)", "3", ":", "0.0231", "0.7496", "0.2272",
"9", "9", "(x)", "3", ":", "0.046", "0.6861", "0.2678",
"10", "10", "(x)", "3", ":", "0.0843", "0.6739", "0.2418"),
ncol = 8,
byrow = TRUE
) %>%
data.frame %>%
mutate(X6 = as.numeric(X6),
X7 = as.numeric(X7))
A = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 1)
B = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 2)
C = Q_simulate(alpha = 1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 3)
D = Q_simulate(alpha = 1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 4)
plot_A <- Q_plot(Q = A %>% arrange(q1),
K=2) +
ggplot2::scale_fill_brewer("Blues")
plot_B <- Q_plot(Q = B,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
plot_C <- Q_plot(Q = C,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
plot_D <- Q_plot(Q = D,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
# Display these plots in a grid
cowplot::plot_grid(plot_A, plot_B, plot_C, plot_D,
labels = "AUTO",
nrow = 1,
vjust = 2)
Q_stat(Q = A, K = 2)
Q_stat(Q = B, K = 2)
Q_stat(Q = C, K = 2)
Q_stat(Q = D, K = 2)
build_all()
build()
install()
?Q_bootstrap
library(devtools)
build_readme()
build_readme()
build_readme()
build_readme()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
warnings = FALSE,
message = FALSE,
fig.width = 7,
comment = "#>"
)
library(dplyr)
Q_example <- matrix(
c("1", "1", "(x)", "1", ":", "1", "0", "0",
"2", "2", "(x)", "1", ":", "1",  "0", "0",
"3", "3", "(x)", "2", ":", "0.0137", "0.7567", "0.2296",
"4", "4", "(x)", "2", ":", "0", "0.7325", "0.2674",
"5", "5", "(x)", "2", ":", "0.0224", "0.7279", "0.2496",
"6", "6", "(x)", "3", ":", "0.0222", "0.7372", "0.2406",
"7", "7", "(x)", "3", ":", "0", "0.7396", "0.2603",
"8", "8", "(x)", "3", ":", "0.0231", "0.7496", "0.2272",
"9", "9", "(x)", "3", ":", "0.046", "0.6861", "0.2678",
"10", "10", "(x)", "3", ":", "0.0843", "0.6739", "0.2418"),
ncol = 8,
byrow = TRUE
) %>%
data.frame %>%
mutate(X6 = as.numeric(X6),
X7 = as.numeric(X7))
# Chunk 2
knitr::kable(Q_example, col.names = NULL)
# Chunk 3
# install.packages("devtools") # Run if devtools is not yet installed
# devtools::install_github("MaikeMorrison/FSTruct") # Run if FSTruct is not yet installed
# Chunk 4
# install.packages("dplyr") # Run if dplyr is not yet installed
# install.packages("ggplot2") # Run if ggplot2 is not yet installed
# install.packages("cowplot") # Run if cowplot is not yet installed
# install.packages("data.table") # Run if data.table is not yet installed
# Chunk 5: setup
library(FSTruct)
library(dplyr)
A = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 1)
B = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 2)
C = Q_simulate(alpha = 50, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 3)
D = Q_simulate(alpha = 50, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 4)
knitr::kable(A)
# Generate and modify a plot for each Q matrix
plot_A <- Q_plot(Q = A %>% arrange(q1),
K=2) +
ggplot2::scale_fill_brewer("Blues")
plot_B <- Q_plot(Q = B,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
plot_C <- Q_plot(Q = C,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
plot_D <- Q_plot(Q = D,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
# Display these plots in a grid
cowplot::plot_grid(plot_A, plot_B, plot_C, plot_D,
labels = "AUTO",
nrow = 1,
vjust = 2)
Q_stat(Q = A, K = 2)
Q_stat(Q = B, K = 2)
Q_stat(Q = C, K = 2)
Q_stat(Q = D, K = 2)
bootstrap <- Q_bootstrap(matrices = list(A = A, B = B, C = C, D = D),
n_replicates = 100,
K = 2,
seed = 1)
bootstrap$test_kruskal_wallis
bootstrap$test_pairwise_wilcox
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
warnings = FALSE,
message = FALSE,
fig.width = 7,
comment = "#>"
)
library(dplyr)
Q_example <- matrix(
c("1", "1", "(x)", "1", ":", "1", "0", "0",
"2", "2", "(x)", "1", ":", "1",  "0", "0",
"3", "3", "(x)", "2", ":", "0.0137", "0.7567", "0.2296",
"4", "4", "(x)", "2", ":", "0", "0.7325", "0.2674",
"5", "5", "(x)", "2", ":", "0.0224", "0.7279", "0.2496",
"6", "6", "(x)", "3", ":", "0.0222", "0.7372", "0.2406",
"7", "7", "(x)", "3", ":", "0", "0.7396", "0.2603",
"8", "8", "(x)", "3", ":", "0.0231", "0.7496", "0.2272",
"9", "9", "(x)", "3", ":", "0.046", "0.6861", "0.2678",
"10", "10", "(x)", "3", ":", "0.0843", "0.6739", "0.2418"),
ncol = 8,
byrow = TRUE
) %>%
data.frame %>%
mutate(X6 = as.numeric(X6),
X7 = as.numeric(X7))
# Chunk 2
knitr::kable(Q_example, col.names = NULL)
# Chunk 3
# install.packages("devtools") # Run if devtools is not yet installed
# devtools::install_github("MaikeMorrison/FSTruct") # Run if FSTruct is not yet installed
# Chunk 4
# install.packages("dplyr") # Run if dplyr is not yet installed
# install.packages("ggplot2") # Run if ggplot2 is not yet installed
# install.packages("cowplot") # Run if cowplot is not yet installed
# install.packages("data.table") # Run if data.table is not yet installed
# Chunk 5: setup
library(FSTruct)
library(dplyr)
# Chunk 8
A = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 10)
B = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 20)
C = Q_simulate(alpha = 5, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 30)
D = Q_simulate(alpha = 5, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 40)
# Chunk 9
knitr::kable(A)
# Chunk 10
# Generate and modify a plot for each Q matrix
plot_A <- Q_plot(Q = A %>% arrange(q1),
K=2) +
ggplot2::scale_fill_brewer("Blues")
plot_B <- Q_plot(Q = B,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
plot_C <- Q_plot(Q = C,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
plot_D <- Q_plot(Q = D,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
# Chunk 11
# Display these plots in a grid
cowplot::plot_grid(plot_A, plot_B, plot_C, plot_D,
labels = "AUTO",
nrow = 1,
vjust = 2)
# Chunk 12
Q_stat(Q = A, K = 2)
Q_stat(Q = B, K = 2)
Q_stat(Q = C, K = 2)
Q_stat(Q = D, K = 2)
# Chunk 13
bootstrap <- Q_bootstrap(matrices = list(A = A, B = B, C = C, D = D),
n_replicates = 100,
K = 2,
seed = 1)
# Chunk 14
cowplot::plot_grid(bootstrap$plot_boxplot + ggplot2::ggtitle("Box Plot"),
bootstrap$plot_violin + ggplot2::ggtitle("Violin Plot"),
bootstrap$plot_ecdf + ggplot2::ggtitle("ECDF Plot"),
nrow = 2, rel_widths = c(1,1,2))
# Chunk 15
bootstrap$test_kruskal_wallis
bootstrap$test_pairwise_wilcox
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
warnings = FALSE,
message = FALSE,
fig.width = 7,
comment = "#>"
)
library(dplyr)
Q_example <- matrix(
c("1", "1", "(x)", "1", ":", "1", "0", "0",
"2", "2", "(x)", "1", ":", "1",  "0", "0",
"3", "3", "(x)", "2", ":", "0.0137", "0.7567", "0.2296",
"4", "4", "(x)", "2", ":", "0", "0.7325", "0.2674",
"5", "5", "(x)", "2", ":", "0.0224", "0.7279", "0.2496",
"6", "6", "(x)", "3", ":", "0.0222", "0.7372", "0.2406",
"7", "7", "(x)", "3", ":", "0", "0.7396", "0.2603",
"8", "8", "(x)", "3", ":", "0.0231", "0.7496", "0.2272",
"9", "9", "(x)", "3", ":", "0.046", "0.6861", "0.2678",
"10", "10", "(x)", "3", ":", "0.0843", "0.6739", "0.2418"),
ncol = 8,
byrow = TRUE
) %>%
data.frame %>%
mutate(X6 = as.numeric(X6),
X7 = as.numeric(X7))
# Chunk 2
knitr::kable(Q_example, col.names = NULL)
# Chunk 3
# install.packages("devtools") # Run if devtools is not yet installed
# devtools::install_github("MaikeMorrison/FSTruct") # Run if FSTruct is not yet installed
# Chunk 4
# install.packages("dplyr") # Run if dplyr is not yet installed
# install.packages("ggplot2") # Run if ggplot2 is not yet installed
# install.packages("cowplot") # Run if cowplot is not yet installed
# install.packages("data.table") # Run if data.table is not yet installed
# Chunk 5: setup
library(FSTruct)
library(dplyr)
# Chunk 8
A = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 1)
B = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 2)
C = Q_simulate(alpha = 5, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 3)
D = Q_simulate(alpha = 5, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 4)
# Chunk 9
knitr::kable(A)
# Chunk 10
# Generate and modify a plot for each Q matrix
plot_A <- Q_plot(Q = A %>% arrange(q1),
K=2) +
ggplot2::scale_fill_brewer("Blues")
plot_B <- Q_plot(Q = B,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
plot_C <- Q_plot(Q = C,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
plot_D <- Q_plot(Q = D,
K=2,
arrange = TRUE) +
ggplot2::scale_fill_brewer("Blues")
# Chunk 11
# Display these plots in a grid
cowplot::plot_grid(plot_A, plot_B, plot_C, plot_D,
labels = "AUTO",
nrow = 1,
vjust = 2)
# Chunk 12
Q_stat(Q = A, K = 2)
Q_stat(Q = B, K = 2)
Q_stat(Q = C, K = 2)
Q_stat(Q = D, K = 2)
# Chunk 13
bootstrap <- Q_bootstrap(matrices = list(A = A, B = B, C = C, D = D),
n_replicates = 100,
K = 2,
seed = 1)
# Chunk 14
cowplot::plot_grid(bootstrap$plot_boxplot + ggplot2::ggtitle("Box Plot"),
bootstrap$plot_violin + ggplot2::ggtitle("Violin Plot"),
bootstrap$plot_ecdf + ggplot2::ggtitle("ECDF Plot"),
nrow = 2, rel_widths = c(1,1,2))
# Chunk 15
bootstrap$test_kruskal_wallis
bootstrap$test_pairwise_wilcox
document()
build(vignettes = TRUE, manual = TRUE)
check()
check()
#' # Fst/FstMax for each Q matrix:
#' bs$plot_violin
#'
#' # To determine if each of the 4 distibutions of
#' # Fst/FstMax is significantly different from
#' # each of the other distributions:
#' bs$test_pairwise_wilcox
#' @importFrom dplyr %>%
#' @importFrom rlang .data
#' @export
Q_bootstrap <- function(matrices, n_replicates, K, seed) {
. <- NULL # to please R command check
# set seed
if (!missing(seed)) {
set.seed(seed)
}
# Do computations if matrices = a single matrix ---------------------------------------
if (is.data.frame(matrices) | is.array(matrices) | length(matrices) == 1) {
n_matrix <- 1
names <- "Q"
# Clean Q matrix - isolate ancestry coefficients
matrices <- Q_checker(Q = matrices, K = K)
bootstrap_matrices_Q <- list()
matrix <- matrices
# Generate bootstrap data sets
for (replicate in 1:n_replicates) {
bootstrap_matrices_Q[[replicate]] <- matrix[purrr::rdunif(
n = nrow(matrix),
a = 1, b = nrow(matrix)
), ]
}
# Compute statistics for these reps
stats_Q <- lapply(
X = bootstrap_matrices_Q,
FUN = function(matrix) Q_stat(Q = matrix, K = ncol(matrix))
) %>%
unlist() %>%
matrix(ncol = 3, byrow = TRUE) %>%
data.frame() %>%
`colnames<-`(c("Fst", "FstMax", "ratio"))
# Do computations if matrices = a list ---------------------------------------------
} else if (is.list(matrices)) {
n_matrix <- length(matrices)
# List of names of matrices
names <- if (sum(!is.na(names(matrices)))) {
names(matrices)
} else {
1:n_matrix
}
## For each matrix: ##
for (m in 1:n_matrix) {
if(length(K>1)){
K.list <- K
K <- K.list[[m]]
}
bs_list <- list()
matrix <- matrices[[m]]
# Check format of matrix
matrix <- Q_checker(Q = matrix, K = K, rep = m)
# Generate bootstrap data sets
for (replicate in 1:n_replicates) {
bs_list[[replicate]] <- matrix[purrr::rdunif(
n = nrow(matrix),
a = 1, b = nrow(matrix)
), ]
}
# Compute statistics for these reps
stats <- lapply(
X = bs_list,
FUN = function(matrix) Q_stat(Q = matrix, K = ncol(matrix))
) %>%
unlist() %>%
matrix(ncol = 3, byrow = TRUE) %>%
data.frame() %>%
`colnames<-`(c("Fst", "FstMax", "ratio"))
# Sometimes, for values of Fst very close to 0 (i.e. order 10^-6, 10^-7), the
# value of Fst ends up negative due to precision errors.
# Find matrices for which this is the case, and replace them and their statistics
while (sum(stats$ratio < 0)) {
# Which bootstrap matrices have negative values for Fst/FstMax?
negatives <- which(stats$ratio < 0)
# Replace those bootstrap replicates with new, random bootstrap replicates
bs_list[negatives] <- lapply(
X = 1:length(negatives),
FUN = function(x) {
matrix[purrr::rdunif(
n = nrow(matrix),
a = 1, b = nrow(matrix)
), ]
}
)
# Replace the corresponding entries of the statistics matrix
stats[negatives, ] <- lapply(
X = bs_list[negatives],
FUN = function(matrix) {
Q_stat(Q = matrix, K = ncol(matrix))
}
) %>%
unlist() %>%
matrix(ncol = 3, byrow = TRUE) %>%
data.frame()
} # repeat this until there are no more errors
# Name this dataset, based on the name of the matrices in the list or the entry number
assign(paste0("stats_", names[m]), stats, pos = -1)
assign(paste0("bootstrap_matrices_", names[m]), bs_list, pos = -1)
}
} else {
stop("Error: The entry `matrices` must be a data frame, matrix, or array, or a list of these objects.")
}
# Make a dataset with all matrices' statistics:
all_stats <- cbind(
Matrix =
names %>%
lapply(function(name) rep(name, n_replicates)) %>%
unlist(),
mget(paste0("stats_", names)) %>%
do.call(what = rbind, args = .) %>%
rbind()
)
all_stats$Matrix <- factor(all_stats$Matrix, levels = unique(all_stats$Matrix))
plot_ecdf <- ggplot2::ggplot(data = all_stats) +
ggplot2::stat_ecdf(ggplot2::aes(x = .data$ratio, color = .data$Matrix)) +
ggplot2::xlab(latex2exp::TeX("F_{ST}/F_{ST}^{max}")) +
ggplot2::ylab("Cumulative Probability") +
ggplot2::xlim(0, 1) +
ggplot2::theme_bw() +
ggplot2::scale_color_viridis_d()
plot_boxplot <- ggplot2::ggplot(
data = all_stats,
ggplot2::aes(x = .data$Matrix, y = .data$ratio)
) +
ggplot2::geom_boxplot() +
ggplot2::ylab(latex2exp::TeX("F_{ST}/F_{ST}^{max}")) +
ggplot2::xlab("") +
ggplot2::theme_bw()
plot_violin <- ggplot2::ggplot(
data = all_stats,
ggplot2::aes(
x = .data$Matrix,
y = round(.data$ratio, 5)
)
) +
ggplot2::geom_violin(scale = "width") +
ggplot2::geom_boxplot(width = 0.3) +
ggplot2::ylab(latex2exp::TeX("F_{ST}/F_{ST}^{max}")) +
ggplot2::xlab("") +
ggplot2::theme_bw()
if (is.data.frame(matrices) | is.array(matrices)) {
test_kruskal_wallis <- "This statistical test can only be performed if a list of matrices is provided."
test_pairwise_wilcox <- "This statistical test can only be performed if a list of matrices is provided."
} else {
test_kruskal_wallis <- stats::kruskal.test(all_stats$ratio ~ all_stats$Matrix)
test_pairwise_wilcox <- stats::pairwise.wilcox.test(
x = all_stats$ratio,
g = all_stats$Matrix,
paired = FALSE
)
}
bootstrap_replicates <- mget(paste0(
"bootstrap_matrices_",
names
))
return(list(
bootstrap_replicates = bootstrap_replicates,
statistics = all_stats,
plot_boxplot = plot_boxplot,
plot_violin = plot_violin,
plot_ecdf = plot_ecdf,
test_kruskal_wallis = test_kruskal_wallis,
test_pairwise_wilcox = test_pairwise_wilcox
))
}
devtools::check()
library(devtools)
load_all()
A = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 1)
B = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 2)
C = Q_simulate(alpha = 5, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 3)
D = Q_simulate(alpha = 5, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 4)
bootstrap <- Q_bootstrap(matrices = list(A = A, B = B, C = C, D = D),
n_replicates = 100,
K = 2,
seed = 1)
K=1
length(K)
matrices = list(A = A, B = B, C = C, D = D)
n_replicates = 100
K = 2
seed = 1
if(length(K>1)){
K <- K.list[[m]]
}
(length(K>1)
load_all()
bootstrap <- Q_bootstrap(matrices = list(A = A, B = B, C = C, D = D),
n_replicates = 100,
K = 2,
seed = 1)
check()
document()
build()
build_vignettes()
check()
devtools::check()
devtools::check()
devtools::check()
