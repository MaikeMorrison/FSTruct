.5,.4,.1,
.6,.1,.3,
.6,.3,.1),
nrow = 5,
byrow = TRUE)
n_matrix = 1
names <- "Q"
K=3
matrices <- matrices[(ncol(matrices)-K+1):ncol(matrices)]
matrices
plot.structure(
# Make an example matrix of membership coefficients.
# Each row is an individual. Rows sum to 1.
Q = matrix(c(.4,.2,.39,
.5,.3,.2,
.5,.4,.1,
.6,.1,.3,
.6,.3,.1),
nrow = 5,
byrow = TRUE) ,
# How many ancestry coefficients per individual?
k = 3
) +
#Below are example, optional modifications to the default plot
ggplot2::ggtitle("Population A") +
ggplot2::scale_fill_brewer("Blues") +
ggplot2::xlab("Individuals")
Q = matrix(c(.4,.2,.39,
.5,.3,.2,
.5,.4,.1,
.6,.1,.3,
.6,.3,.1),
nrow = 5,
byrow = TRUE)
matrices <- Q
(ncol(matrices)-K+1):ncol(matrices)
matrices <- matrices[,(ncol(matrices)-K+1):ncol(matrices)]
matrices
rowSums(matrices)
round(rowSums(matrices), 1)
round(rowSums(matrices), 1) != 1
TRUE + FALSE
TRUE + TRUE + FALSE + FALSE
?assign
library(devtools)
getwd()
load_all()
load_all()
check()
check()
document()
?Q_plot
check()
document()
document()
?Q_stat
document()
?Q_plot
?Q_stata
?Q_stat
document()
?Q_stat
document()
?Q_stat
?ggplot
?Q_stat
?Q_stat
document()
?Q_stat
document()
?Q_stat
document{}
document()
?Q_stat
document()
?Q_stat
document()
?Q_stat
document()
?Q_stat
B = matrix(c(0,0,1,
.5,.5,0,
.5,.4,.1,
.6,.1,.3,
.6,.4,0),
nrow = 5,
byrow = TRUE)
A = matrix(c(.4,.2,.4,
.5,.3,.2,
.5,.4,.1,
.6,.1,.3,
.6,.3,.1),
nrow = 5,
byrow = TRUE)
bs <- Q_bootstrap(matrices = list(A, B), n_replicates = 10, K = 3)
name(A)
#' Q_statA = matrix(c(.4,.2,.4,.5,.3,.2,
document()
library(devtools)
load_all()
document()
?Q_bootstrap
document()
?Q_bootstrap
document()
?Q_stat
document()
document)
document()
?Q_bootstrap
?data.frame
document()
?Q_bootstrap
?Q_stat
?rdunif
?lapply
?do.call
?stat.ecdf
?stat_ecdf
?aes
?kruskal.test
?pairwise.wilcox.test
document()
document()
check()
document()
?Q_bootstrap
document()
?Q_bootstrap
document()
?Q_bootstrap
?mutate
?unlist
?rbind
?arrange
document()
?Q_simulate
Q_simulate(alpha = 1, lambda = (1/2,1/2), rep = 10, popsize = 5, seed = 2)
Q_simulate(alpha = 1, lambda = c(1/2,1/2), rep = 10, popsize = 5, seed = 2)
document()
?Q_simulate
document()
?Q_simulate
?Q_bootstrap
check()
check()
check()
check()
check()
check()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
warnings = FALSE,
message = FALSE,
fig.width = 7,
comment = "#>"
)
library(dplyr)
Q_example <- matrix(
c(1, "0.001_1", 1, 1, ":", 0.428121, 0.571879,
2, "0.001_2", 2, 1, ":", 0.402014, 0.597986,
3, "0.001_3", 3, 1, ":", 0.384399, 0.615601,
4, "0.001_4", 4, 1, ":", 0.378551, 0.621449,
5, "0.001_5", 5, 1, ":", 0.373431, 0.626569,
6, "0.001_6", 6, 1, ":", 0.368566, 0.631434,
7, "0.001_7", 7, 1, ":", 0.361619, 0.638381,
8, "0.001_8", 8, 1, ":", 0.360798, 0.639202,
9, "0.001_9", 9, 1, ":", 0.358637, 0.641363,
10, "0.001_10", 10, 1, ":", 0.357666, 0.642334
),
ncol = 7,
byrow = TRUE
) %>%
data.frame %>%
mutate(X6 = as.numeric(X6),
X7 = as.numeric(X7))
# Chunk 2
knitr::kable(Q_example, col.names = NULL)
# Chunk 3: setup
library(FSTruct)
library(dplyr)
# Chunk 5
A = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 1)
B = Q_simulate(alpha = .1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 2)
C = Q_simulate(alpha = 1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 3)
D = Q_simulate(alpha = 1, lambda = c(.75, .25), rep = 1, popsize = 20, seed = 4)
# Chunk 6
knitr::kable(A)
# Chunk 7
# Generate and modify a plot for each Q matrix
# arrange(var) sorts the individuals in order of that variable
# scale_fill_brewer() modifies the color scheme
# Because Q_plot() outputs a ggplot, you can do lots of modifications!
plot_A <- Q_plot(Q = A %>% arrange(lambda1),
K=2) +
ggplot2::scale_fill_brewer("Blues")
plot_B <- Q_plot(Q = B %>% arrange(lambda1),
K=2) +
ggplot2::scale_fill_brewer("Blues")
plot_C <- Q_plot(Q = C %>% arrange(lambda1),
K=2) +
ggplot2::scale_fill_brewer("Blues")
plot_D <- Q_plot(Q = D %>% arrange(lambda1),
K=2) +
ggplot2::scale_fill_brewer("Blues")
# Display them in a grid
cowplot::plot_grid(plot_A, plot_B, plot_C, plot_D,
labels = "AUTO",
nrow = 1,
vjust = 2)
# Chunk 8
Q_stat(Q = A, K = 2)
Q_stat(Q = B, K = 2)
Q_stat(Q = C, K = 2)
Q_stat(Q = D, K = 2)
# Chunk 9
bs <- Q_bootstrap(matrices = list(A = A, # name = matrix
B = B,
C = C,
D = D),
n_replicates = 100,
K = 2,
seed = 1)
cowplot::plot_grid(bs$plot_boxplot, bs$plot_violin, bs$plot_ecdf, nrow = 1)
cowplot::plot_grid(bs$plot_boxplot + ggtitle("Box Plot"),
bs$plot_violin + ggtitle("Violin Plot"),
bs$plot_ecdf + ggtitle("ECDF Plot"),
nrow = 1)
cowplot::plot_grid(bs$plot_boxplot + ggplot2::ggtitle("Box Plot"),
bs$plot_violin + ggplot2::ggtitle("Violin Plot"),
bs$plot_ecdf + ggplot2::ggtitle("ECDF Plot"),
nrow = 1)
bs$test_kruskal_wallis
bs$test_pairwise_wilcox
?cowplot::plot_grid
devtools
devtools::documedocument())
devtools::documedocument()
devtools::document()
devtools::build_vignettes()
devtools::build()
?devtools::install_github
?install_github
devtools::install_github("MaikeMorrison/fstruct", auth_token = "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")
browseVignettes("cowplot")
browseVignettes("ggplot2")
browseVignettes()
browseVignettes("FSTruct")
devtools::build_manual()
devtools::install_github("MaikeMorrison/fstruct", auth_token = "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")
FSTruct::Q_bootstrap(matrices = A, n_replicates = 1, K = 2, seed = 1)
FSTruct::Q_bootstrap(matrices = list(A, B), n_replicates = 1, K = 2, seed = 1)
devtools::build()
devtools::build()
devtools::document()
devtools::load_all()
library(dplyr)
devtools::load_all()
library(FSTruct)
remove.packages("FSTruct", lib="~/R/win-library/4.0")
install.packages(c("ape", "astsa", "backports", "BiocManager", "boot", "broom", "bslib", "cachem", "car", "class", "colorspace", "corrplot", "curl", "devtools", "dplyr", "ellipsis", "fansi", "fastmap", "forecast", "gert", "ggplot2", "ggplotify", "ggsignif", "gh", "gtools", "hms", "httpuv", "KernSmooth", "lme4", "magick", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "nnet", "openssl", "openxlsx", "phangorn", "phytools", "plotly", "processx", "quantreg", "RcppArmadillo", "RcppDate", "remotes", "rio", "rlang", "rmarkdown", "rversions", "sass", "spatial", "statmod", "stringi", "survival", "testthat", "tibble", "tinytex", "vctrs", "xfun", "zip"))
devtools::load_all()
devtools::document()
install.packages("dplyr")
devtools::document()
rlang::last_error()
devtools::document()
library(devtools)
load_all()
load_all()
library(ellipsis)
detach("package:ellipsis", unload = TRUE)
install.packages("ellipsis")
install.packages(c("colorspace", "ellipsis", "gtools", "rlang", "stringi", "vctrs", "xfun"))
devtools::load_all()
devtools::document()
install.packages(c("colorspace", "gtools", "rlang", "stringi", "vctrs", "xfun"))
install.packages("vctrs")
devtools::document()
devtools::load_all()
tinytex::install_tinytex()
install.packages("xfun")
devtools::build_manual()
devtools::build_manual()
tinytex::check_installed()
tinytex::tlmgr_install()
tinytex::use_tinytex()
tinytex::use_tinytex()
tinytex::use_tinytex()
tinytex::check_installed()
tinytex::tinytex_root()
tinytex::use_tinytex(from = "C:\\Users\\maike\\AppData\\Roaming\\TinyTeX")
tinytex::tinytex_root()
devtools::build_manual()
devtools::build_manual()
xfun::session_info('rmarkdown')
tinytex:::is_tinytex()
Sys.getenv('PATH')
(function() {
tinytex:::tweak_path()
print(Sys.which('pdflatex'))
system2('pdflatex', '--version')
})()
p = tinytex:::win_app_dir('TinyTeX', 'bin', 'win32', 'pdflatex.exe')
file.info(p)
xfun::session_info('rmarkdown')
tinytex::tinytex_root()
Sys.getenv('PATH')
tinytex::tlmgr_path()
(tinytex::tlmgr_path())
?tinytex::tlmgr_path()
tlmgr path add
Sys.getenv('PATH')
(function() {
tinytex:::tweak_path()
print(Sys.which('pdflatex'))
system2('pdflatex', '--version')
})()
devtools::build_manual()
list.files(tinytex:::win_app_dir('TinyTeX', 'bin', 'win32'))
devtools::build_manual()
tinytex::uninstall_tinytex()
tinytex::install_prebuilt()
tinytex::install_tinytex(version = '0.9')
tinytex:::install_prebuilt()
devtools::build_manual()
devtools::build_manual()
library(devtools)
load_all()
A
B
Q_stat(A)
Q_stat(A, 2)
Q_bootstrap(matrices = A, n_replicates = 1, K=2)
is.list(A)
str(A)
devtools::load_all()
Q_bootstrap(matrices = A, n_replicates = 1, K=2)
bs <- Q_bootstrap(A, 1, 2)
bs$bootstrap_replicates
bs$statistics
bs$plot_boxplot
bs$test_kruskal_wallis
bs$test_pairwise_wilcox
bs <- Q_bootstrap(list(A, B), 1, 2)
bs$bootstrap_replicates
bs$statistics
bs$plot_boxplot
bs$plot_violin
bs <- Q_bootstrap(list(A, B), 100, 2)
bs$bootstrap_replicates
str(bs$bootstrap_replicates)
bs$plot_boxplot
bs$plot_ecdf
bs$plot_violin
bs$test_kruskal_wallis
bs$test_pairwise_wilcox
bs <- Q_bootstrap(list("Matrix 1" = A, "Matrix 1A" = A, "Matrix 2" = B), 100, 2)
bs$statistics
bs$plot_boxplot
bs$plot_ecdf
bs$test_kruskal_wallis
bs$test_pairwise_wilcox
sims <- Q_simulate(1, c(.75, .25), 10, 50)
str(sims)
check()
load_all
load_all()
Q_ploT(A)
Q_plot(A)
Q_plot(A,2)
Q_plot(B,2)
Q_plot(A,2)
check()
check()
document()
check()
load_all()
bs <- Q_bootstrap(list("Matrix 1" = A, "Matrix 1A" = A, "Matrix 2" = B), 100, 2)
load_all
load_all()
bs <- Q_bootstrap(list("Matrix 1" = A, "Matrix 1A" = A, "Matrix 2" = B), 100, 2)
load_all()
bs <- Q_bootstrap(list("Matrix 1" = A, "Matrix 1A" = A, "Matrix 2" = B), 100, 2)
load_all()
bs <- Q_bootstrap(list("Matrix 1" = A, "Matrix 1A" = A, "Matrix 2" = B), 100, 2)
load_all
load_all()
bs <- Q_bootstrap(list("Matrix 1" = A, "Matrix 1A" = A, "Matrix 2" = B), 100, 2)
load_all()
bs <- Q_bootstrap(list("Matrix 1" = A, "Matrix 1A" = A, "Matrix 2" = B), 100, 2)
load_all()
bs <- Q_bootstrap(list("Matrix 1" = A, "Matrix 1A" = A, "Matrix 2" = B), 100, 2)
bs$plot_violin
check()
sim <- Q_simulate(1, c(.3,.7), 1, 50)
sim
load_all
load_all()
sim <- Q_simulate(1, c(.3,.7), 1, 50)
load_all
load_all()
sim <- Q_simulate(1, c(.3,.7), 1, 50)
load_all()
sim <- Q_simulate(1, c(.3,.7), 1, 50)
sim
load_all()
Q_simulate(1, c(.3,.7), 1, 50)
load_all()
Q_simulate(1, c(.3,.7), 1, 50)
check()
load_all()
Q_simulate(1, c(.3,.7), 1, 50)
check()
dplyr::.
?.
?"."
load_all()
Q_simulate(1, c(.3,.7), 1, 50)
check()
load_all()
?Q_plot
Q_plot(
# Make an example matrix of membership coefficients.
# Each row is an individual. Rows sum to 1.
Q = matrix(c(.4,.2,.4,
.5,.3,.2,
.5,.4,.1,
.6,.1,.3,
.6,.3,.1),
nrow = 5,
byrow = TRUE),
K = 3 # How many ancestry coefficients per individual?
) +
# Below are example, optional modifications to the default plot
ggplot2::ggtitle("Population A") +
ggplot2::scale_fill_brewer("Blues") +
ggplot2::xlab("Individuals")
?Q_bootstrap
# Use Q_simulate to generate 4 random Q matrices
A = Q_simulate(alpha = .1,
lambda = c(.5, .5),
rep = 1,
popsize = 20,
seed = 1)
B = Q_simulate(alpha = .1,
lambda = c(.5, .5),
rep = 1,
popsize = 20,
seed = 2)
C = Q_simulate(alpha = 1,
lambda = c(.5, .5),
rep = 1,
popsize = 20,
seed = 3)
D = Q_simulate(alpha = 1,
lambda = c(.5, .5),
rep = 1,
popsize = 20,
seed = 4)
# Draw 100 bootstrap replicates from
# each of the 4 Q matrices
bs <- Q_bootstrap(matrices = list(A=A,
B=B,
C=C,
D=D),
n_replicates = 100,
K = 2)
# To look at all 400 bootstrap Q matrix
# replicates:
bs$bootstrap_replicates
# To look at Fst, FstMax, and
# the ratio (Fst/FstMax) for each replicate
bs$statistics
# To look at a plot of the distribution of
# Fst/FstMax for each Q matrix:
bs$plot_violin
# To determine if each of the 4 distibutions of
# Fst/FstMax is significantly different from
# each of the other distributions:
bs$test_pairwise_wilcox
?Q_simulate
Q_list <- Q_simulate(alpha = 1,
lambda = c(1/2, 1/4, 1/4),
rep = 100,
popsize = 50,
seed = 1)
Q_list
plot(Q_list,3)
Q_plot(Q_list,3)
Q_plot(Q_list,3) + scale_fill_brewer("Blues")
Q_plot(Q_list,3) + ggplot2::scale_fill_brewer("Blues")
check()
?Q_stat
Q_stat(
# Make an example matrix of membership coefficients.
# Each row is an individual. Rows sum to 1.
Q = matrix(c(.4,.2,.4,
.5,.3,.2,
.5,.4,.1,
.6,.1,.3,
.6,.3,.1),
nrow = 5,
byrow = TRUE),
K = 3) # How many ancestry coefficients per individual?
check()
document()
check()
install.packages("qpdf")
check()
devtools::install_github("MaikeMorrison/fstruct", auth_token = "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")
